#!/usr/bin/env python3

# stdlib
import sys
import argparse
import copy
from re import I
from zlib import Z_NO_COMPRESSION

import trimesh

# 3rd-party
import rospy
import numpy as np
import tf2_ros
from colorama import Fore, Style
from std_msgs.msg import Header, ColorRGBA
from geometry_msgs.msg import Point, Pose, Vector3, Quaternion, TransformStamped, Transform
from visualization_msgs.msg import *
from scipy.spatial.transform import Rotation as R
from tf.transformations import *
from matplotlib import cm
from localbot_core.src.utilities_ros import getFrustumMarkerArray
from localbot_localization.src.dataset import LocalBotDataset
from localbot_localization.src.utilities import *
from localbot_core.src.utilities_ros import *
import tf


def main():
    
    parser = argparse.ArgumentParser(description='Visualizing dataset')
    
    
    arglist = [x for x in sys.argv[1:] if not x.startswith('__')]
    args = vars(parser.parse_args(args=arglist))
    
    home = [0, 0, 0.5, 0, 0, 0]
    
    green1 = [1.8, -3.91, 0.91, -0.069, 0.25, -1.35]
    green2= [0.75, -1.98, 0.35, 0.22, 0.19, 0.88]
    
    red1 = [1.5, -3.96, -0.39, -0.20, -0.61, -0.47]
    red2 = [0.074, 4.25, 0.85, 0.23, 0.09, -2.77]
    
    # yellow = [0.92, 1.55, 1.13, 0.26, 0.32, 1.62]
    yellow = [2.99, 1.58, -0.63, -0.075, 0.87, 0.73]
    
    home_rot = R.from_euler('xyz', home[3:], degrees=False).as_matrix()
    home_44 = rotationAndpositionToMatrix44(home_rot, home[:3])
    
    green1_rot = R.from_euler('xyz', green1[3:], degrees=False).as_matrix()
    green1_44 = rotationAndpositionToMatrix44(green1_rot, green1[:3])
    
    green2_rot = R.from_euler('xyz', green2[3:], degrees=False).as_matrix()
    green2_44 = rotationAndpositionToMatrix44(green2_rot, green2[:3])
    
    red1_rot = R.from_euler('xyz', red1[3:], degrees=False).as_matrix()
    red1_44 = rotationAndpositionToMatrix44(red1_rot, red1[:3])
    
    red2_rot = R.from_euler('xyz', red2[3:], degrees=False).as_matrix()
    red2_44 = rotationAndpositionToMatrix44(red2_rot, red2[:3])
    
    yellow_rot = R.from_euler('xyz', yellow[3:], degrees=False).as_matrix()
    yellow_44 = rotationAndpositionToMatrix44(yellow_rot, yellow[:3])
    
    folder = f'/home/danc/datasets/localbot/dataset_arch'
    write_transformation(f'{folder}/frame-00000.pose.txt', home_44) 
    write_transformation(f'{folder}/frame-00001.pose.txt', green1_44)  
    write_transformation(f'{folder}/frame-00002.pose.txt', green2_44)  
    write_transformation(f'{folder}/frame-00003.pose.txt', red1_44)  
    write_transformation(f'{folder}/frame-00004.pose.txt', red2_44)  
    write_transformation(f'{folder}/frame-00005.pose.txt', yellow_44)  
    
      
        
        
        
    
    
if __name__ == "__main__":
    main()



