#!/usr/bin/env python3
import sys
import argparse
import copy
import rospy
import numpy as np
import tf2_ros
import os

from colorama import Fore, Style
from std_msgs.msg import Header, ColorRGBA
from geometry_msgs.msg import Point, Pose, Vector3, Quaternion
from visualization_msgs.msg import *
from scipy.spatial.transform import Rotation as R
from tf.transformations import *
from matplotlib import cm

from produce_results.src.results import Results

def main():

    parser = argparse.ArgumentParser(description='Visualizing results')
    parser.add_argument('-rf', '--results_folder', type=str,
                        required=True, help='Name of the results folder')
    parser.add_argument('-idx_max', '--idx_max', type=int,
                        default='0', help='max idx of the frame')
    parser.add_argument('-idx_min', '--idx_min', type=int,
                        default='0', help='min idx of the frame')
    parser.add_argument('-fsf', "--frame_selection_function",
                        default='None', type=str, help='see frames that obey a condition')
    parser.add_argument('-mn', "--mesh_name",
                        default='None', type=str, help='mesh name')


    arglist = [x for x in sys.argv[1:] if not x.startswith('__')]
    args = vars(parser.parse_args(args=arglist))

    results = Results(args['results_folder'])

    pos, rot = results.getErrorsArrays()

    idx_max = int(args['idx_max'])
    idx_min = int(args['idx_min'])
    mesh_name = args['mesh_name']

    if not idx_max == 0:
        frames_used = list(range(idx_min,idx_max))
    else:
        frames_used = []

    if (args['frame_selection_function'] != 'None') and (idx_max == 0):
        for idx in range(len(results)):
            if eval(args['frame_selection_function']):
                frames_used.append(idx)

    if len(frames_used) == 0:
        print(f'{Fore.RED} no frames selected {Fore.RESET}')
        exit(0)

    rospy.init_node('visualize_results')
    rate = rospy.Rate(10)

    marker_pub = rospy.Publisher("/marker_array", MarkerArray, queue_size=10)
    tf_broadcaster = tf2_ros.TransformBroadcaster()
    
    colormap = cm.tab20(np.linspace(0, 1, len(frames_used)))
    
    print(f'frames used: {Fore.GREEN} {frames_used} {Fore.RESET}')

    while not rospy.is_shutdown():
        markers = MarkerArray()

        if mesh_name != 'None':
            marker = Marker(header=Header(frame_id="map", stamp=rospy.Time.now()),
                            id=0, frame_locked=False,
                            type=Marker.MESH_RESOURCE, action=Marker.ADD, lifetime=rospy.Duration(
                                0),
                            pose=Pose(position=Point(x=0, y=0, z=0),
                                    orientation=Quaternion(x=0, y=0, z=0, w=1)),
                            scale=Vector3(x=1.0, y=1.0, z=1.0))
            # marker.mesh_resource = 'package://synfeal_visualization/models/room_024/room_024.dae'
            #print(f'{os.environ["HOME"]}/models_3d/localbot/{mesh_name}/{mesh_name}.dae')
            #'file:///home/danc/models_3d/santuario/Virtudes_Chapel.dae'
            path=os.environ.get("GAZEBO_MODEL_PATH").split(":") 
            marker.mesh_resource = f'file://{path[2]}/models_3d/localbot/{mesh_name}/{mesh_name}.dae'
            marker.mesh_use_embedded_materials = True
            markers.markers.append(marker)
            
            

        for idx,frame_idx in enumerate(frames_used):
            
            print(idx)

            # publish markers
            pose_real, pose_predicted = results[frame_idx]

            ######  REAL ########

            # Rotate orientation because the arrow points to the X-axis! (it must point to Z-axis)
            pose_real_marker = copy.deepcopy(pose_real)
            matrix_quaternion_marker = R.from_quat(
                pose_real_marker[3:]).as_matrix()
            rotate_y90 = R.from_euler('y', -90, degrees=True).as_matrix()
            matrix_quaternion_marker = np.dot(
                matrix_quaternion_marker, rotate_y90)
            quaternion_marker = R.from_matrix(
                matrix_quaternion_marker).as_quat()

            marker = Marker(header=Header(
                frame_id="map", stamp=rospy.Time.now()))
            marker.type = marker.ARROW
            marker.action = marker.ADD
            marker.scale.x = 0.3
            marker.scale.y = 0.05
            marker.scale.z = 0.05
            marker.color.a = 0.8
            marker.color.r = colormap[idx][0]
            marker.color.g = colormap[idx][1]
            marker.color.b = colormap[idx][2]
            marker.pose.orientation.x = quaternion_marker[0]
            marker.pose.orientation.y = quaternion_marker[1]
            marker.pose.orientation.z = quaternion_marker[2]
            marker.pose.orientation.w = quaternion_marker[3]
            marker.pose.position.x = pose_real[0]
            marker.pose.position.y = pose_real[1]
            marker.pose.position.z = pose_real[2]
            marker.ns = 'real'
            marker.id = idx

            markers.markers.append(marker)

            ######  PREDICTED  ########

            pose_predicted_marker = copy.deepcopy(pose_predicted)
            matrix_quaternion_marker = R.from_quat(
                pose_predicted_marker[3:]).as_matrix()
            rotate_y90 = R.from_euler('y', -90, degrees=True).as_matrix()
            matrix_quaternion_marker = np.dot(
                matrix_quaternion_marker, rotate_y90)
            quaternion_marker = R.from_matrix(
                matrix_quaternion_marker).as_quat()

            marker = Marker(header=Header(
                frame_id="map", stamp=rospy.Time.now()))
            marker.type = marker.ARROW
            marker.action = marker.ADD
            marker.scale.x = 0.10
            marker.scale.y = 0.08
            marker.scale.z = 0.08
            marker.color.a = 0.4
            marker.color.r = colormap[idx][0]
            marker.color.g = colormap[idx][1]
            marker.color.b = colormap[idx][2]
            marker.pose.orientation.x = quaternion_marker[0]
            marker.pose.orientation.y = quaternion_marker[1]
            marker.pose.orientation.z = quaternion_marker[2]
            marker.pose.orientation.w = quaternion_marker[3]
            marker.pose.position.x = pose_predicted[0]
            marker.pose.position.y = pose_predicted[1]
            marker.pose.position.z = pose_predicted[2]
            marker.ns = 'predicted'
            marker.id = idx

            markers.markers.append(marker)
        marker_pub.publish(markers)
        rate.sleep()


if __name__ == "__main__":
    main()
