#!/usr/bin/env python3

import cv2
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from colorama import Fore, Style
import numpy as np
import matplotlib.pyplot as plt
import argparse
import sys
import os
from colorama import Fore
from localbot_localization.src.results import LocalBotResults


def main():

    parser = argparse.ArgumentParser(description='Producing results')
    parser.add_argument('-rf', '--results_folder', type=str, required=True, help='Batch size')
    arglist = [x for x in sys.argv[1:] if not x.startswith('__')]
    args = vars(parser.parse_args(args=arglist))
    results = LocalBotResults(args['results_folder'])
    folder = f'{results.path}/side_by_side'

    if not os.path.exists(folder):
        print(f'Creating folder {folder}')
        os.makedirs(folder)  # Create the new folder
    else:
        print(f'{Fore.RED} {folder} already exists... Aborting side by side initialization! {Fore.RESET}')
        exit(0)

    for idx in range(len(results)):
        print(f'computing idx: {idx}')
        
        real_image = cv2.imread(f'{results.path}/images/frame-{idx:05d}.real.rgb.png', cv2.IMREAD_UNCHANGED)
        predicted_image = cv2.imread(f'{results.path}/images/frame-{idx:05d}.predicted.rgb.png', cv2.IMREAD_UNCHANGED)
        
        #20,8
        f = plt.figure(figsize=(20,8))
        f.suptitle(f'frame{idx}')
        ax = f.add_subplot(121)
        ax2 = f.add_subplot(122)
        ax.set_title('Real Image')
        ax.imshow(cv2.cvtColor(real_image, cv2.COLOR_BGR2RGB))
        ax.axis('off')
        ax2.set_title('Predicted Image')
        ax2.imshow(cv2.cvtColor(predicted_image, cv2.COLOR_BGR2RGB))
        ax2.axis('off')
        plt.savefig(f'{folder}/frame-{idx:05d}.png')
        plt.close(f)
        
if __name__ == "__main__":
    main()