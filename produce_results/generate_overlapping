#!/usr/bin/env python3

import cv2
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from colorama import Fore, Style
import numpy as np
import matplotlib.pyplot as plt
import argparse
import sys
import os
from colorama import Fore
from localbot_localization.src.results import LocalBotResults
import shutil


def main():

    parser = argparse.ArgumentParser(description='Generate overlapping')
    parser.add_argument('-rf', '--results_folder', type=str, required=True, help='Batch size')
    arglist = [x for x in sys.argv[1:] if not x.startswith('__')]
    args = vars(parser.parse_args(args=arglist))
    results = LocalBotResults(args['results_folder'])
    folder = f'{results.path}/overlapping'


    #shutil.rmtree(f'{folder}')
    if not os.path.exists(folder):
        print(f'Creating folder {folder}')
        os.makedirs(folder)  # Create the new folder
    else:
        print(f'{Fore.RED} {folder} already exists... Aborting overlaping generation! {Fore.RESET}')
        exit(0)
        
    alpha = 0.35
    #alpha = 0.40
    for idx in range(len(results)):
        print(f'computing idx: {idx}')
        
        real_image = cv2.imread(f'{results.path}/images/frame-{idx:05d}.real.rgb.png', cv2.IMREAD_UNCHANGED)
        predicted_image = cv2.imread(f'{results.path}/images/frame-{idx:05d}.predicted.rgb.png', cv2.IMREAD_UNCHANGED)
        
        # real_image[:,:,0] = 0 #B
        # real_image[:,:,2] = 0 #R
        # predicted_image[:,:,0] = 0 #B
        # predicted_image[:,:,1] = 0 #G
        
        overlapped_image = cv2.addWeighted(predicted_image,alpha,real_image,1-alpha,0)
        #cv2.imshow('overlaped', overlapped_image)
        #cv2.waitKey(0)
        
        cv2.imwrite(f'{folder}/frame-{idx:05d}.png', overlapped_image)
        
        
        
if __name__ == "__main__":
    main()