#!/usr/bin/env python3

# stdlib
import sys
import argparse
import copy
import json

from regex import F
from sklearn.preprocessing import scale

# 3rd-party
import rospy
from colorama import Fore, Style
from localbot_localization.src.dataset import LocalBotDataset
from localbot_localization.src.validate_dataset import ValidateDataset
import numpy as np
from localbot_core.src.utilities import *


def main():
    parser = argparse.ArgumentParser(description='Validate dataset')
    parser.add_argument('-d', '--dataset', type=str,
                        required=True, help='Name of the dataset')
    parser.add_argument('-f', '--folder', type=str,
                        required=True, help='Name of the dataset')

    arglist = [x for x in sys.argv[1:] if not x.startswith('__')]
    args = vars(parser.parse_args(args=arglist))

    dataset = LocalBotDataset(path_seq=args['dataset'])
    
    folder = f'/home/danc/datasets/localbot/rtab/output/{args["folder"]}'
    size_dataset = sum(f.endswith('.txt') for f in os.listdir(folder))
    
    
    first_frame=0
    transfs = [(first_frame,i) for i in range(first_frame,first_frame + size_dataset)]
   

    scale = []
    
    for transf in transfs:
        src = transf[0]
        tgt = transf[1]
           
        # true dataset
        matrix_src = np.loadtxt(f'{dataset.path_seq}/frame-{src:05d}.pose.txt', delimiter=',')
        matrix_tgt = np.loadtxt(f'{dataset.path_seq}/frame-{tgt:05d}.pose.txt', delimiter=',')
        matrix44_t = np.dot(np.linalg.inv(matrix_src), matrix_tgt)
        
        d_t = matrix44_t[:3,3]
        d_t_e = np.linalg.norm(d_t)
        
        # sfm dataset
        matrix_src = np.loadtxt(f'{folder}/frame-{src:05d}.pose.txt', delimiter=',')
        matrix_tgt = np.loadtxt(f'{folder}/frame-{tgt:05d}.pose.txt', delimiter=',')
        matrix44_sfm = np.dot(np.linalg.inv(matrix_src), matrix_tgt)
        
        d_sfm = matrix44_sfm[:3,3]
        d_sfm_e = np.linalg.norm(d_sfm)
        

        if d_sfm_e < 0.1:
            print('ignoring indexs: ', transf)
            continue 
        
       
        s = d_t_e/d_sfm_e
        scale.append(s)

    print(f'scale values: {scale}')
    scale = sum(scale)/len(scale)
   
    print(f'applying scale of {scale}')

    # #for idx in range(3,len(dataset)-1):
    for idx in range(size_dataset):
        idx2 = idx+first_frame
        matrix44 = np.loadtxt(f'{folder}/frame-{idx2:05d}.pose.txt', delimiter=',')
        
        translation_old = matrix44[:3,3]
        #print(translation_old)
        
        #translation_new = translation_old * np.array([scale_x,scale_y,scale_z])
        
        translation_new = translation_old * scale
        
        #print(translation_new)
        matrix44[:3,3] = translation_new
        
        write_transformation(filename=f'{folder}/frame-{idx2:05d}.pose.txt', transformation=matrix44)
    
if __name__ == "__main__":
    main()
