#!/usr/bin/env python3

# stdlib
import sys
import argparse
import copy
import os

from sympy import sieve
from localbot_localization.src.utilities import synthesize_pose

# 3rd-party
import rospy
from visualization_msgs.msg import *
from localbot_localization.src.dataset import LocalBotDataset
from localbot_localization.src.validate_dataset import ValidateDataset
import numpy as np
import shutil
from localbot_core.src.utilities import *
from os.path import exists

def main():    
    parser = argparse.ArgumentParser(description='Validate dataset')
    parser.add_argument('-f', '--folder', type=str, required=True, help='input folder')
    parser.add_argument('-d', '--dataset', type=str, required=True, help='input folder')
    parser.add_argument('-s', '--shift', type=int, default=0, help='shift')

   
    arglist = [x for x in sys.argv[1:] if not x.startswith('__')]
    args = vars(parser.parse_args(args=arglist))
    
    dataset = LocalBotDataset(path_seq=args['dataset'])
    
    folder = f'/home/danc/datasets/localbot/rtab4/output/{args["folder"]}'
    
    dataset_files = [f for f in os.listdir(folder)]
    
    shift = args['shift']
    
    
    last_file = int(sorted(dataset_files, key= lambda x: int(x[6:11]))[-1][6:11])
           
    for idx in range(shift, last_file+1):

        if not exists(f'{folder}/frame-{idx:05d}.pose.txt'):
                # idx does not exists, so we have to rename the closest one.
                print(f'{idx} is missing!!')
                idx_prev = None
                idx_post = None
                
                # compute idx_prev
                for idx2 in range(idx-1, -1, -1):
                    if exists(f'{folder}/frame-{idx2:05d}.pose.txt'):
                        idx_prev = idx2
                        break
                    
                for idx3 in range(idx+1,last_file+1):
                    if exists(f'{folder}/frame-{idx3:05d}.pose.txt'):
                        idx_post = idx3
                        break
                
                
                if idx_prev != None and idx_post != None:
                    print(f'{idx} will be synthesized based on {idx_prev} and {idx_post}')
                    
                    pose_prev = np.loadtxt(f'{folder}/frame-{idx_prev:05d}.pose.txt', delimiter=',')
                    pose_post = np.loadtxt(f'{folder}/frame-{idx_post:05d}.pose.txt', delimiter=',')
                    
                    
                    pose44 = synthesize_pose(pose_prev, pose_post)
                    
                    write_transformation(filename=f'{folder}/frame-{idx:05d}.pose.txt', transformation=pose44)
                
                else:
                    print(f'no data no synthesize {idx}')
                     
    # repeat last poses...
    if last_file < len(dataset):
        for idx in range(last_file+1, len(dataset)):
            shutil.copy2(f'{folder}/frame-{last_file:05d}.pose.txt', f'{folder}/frame-{idx:05d}.pose.txt')
        
    


        

        
if __name__ == "__main__":
    main()



