#!/usr/bin/env python3

# stdlib
import sys
import argparse
import copy
from turtle import pos
from localbot_localization.src.utilities import applyNoise

# 3rd-party
import rospy
from colorama import Fore, Style
from std_msgs.msg import Header
from visualization_msgs.msg import *
from localbot_localization.src.dataset import LocalBotDataset
from localbot_localization.src.validate_dataset import ValidateDataset
from localbot_core.src.utilities import write_transformation
import numpy as np
import math
from scipy.spatial.transform import Rotation as R

def main():    
    parser = argparse.ArgumentParser(description='Validate dataset')
    parser.add_argument('-d', '--dataset', type=str, required=True, help='Name of the dataset')
    parser.add_argument('-s', '--suffix', type=str, required=True, help='Suffix to append to the name of the dataset')
    parser.add_argument('-pe', '--position_error', type=float, required=True, help='Position error in meters ')
    parser.add_argument('-re', '--rotation_error', type=float, required=True, help='Rotation error in degrees')

    
    arglist = [x for x in sys.argv[1:] if not x.startswith('__')]
    args = vars(parser.parse_args(args=arglist))
    
    pos_error = args['position_error']
    rot_error = args['rotation_error']
    
    dataset = LocalBotDataset(path_seq=args['dataset'])
    
    validate = ValidateDataset()
    
    dataset_error = validate.duplicateDataset(dataset, args['suffix'])
    
    del dataset
    
    for idx in range(len(dataset_error)):
        print(idx)
        matrix44 = np.loadtxt(f'{dataset_error.path_seq}/frame-{idx:05d}.pose.txt', delimiter=',')
        
        new_matrix44 = applyNoise(matrix44=matrix44, pos_error=pos_error, rot_error=rot_error)
        
        filename = f'{dataset_error.path_seq}/frame-{idx:05d}.pose.txt'
        
        write_transformation(filename, new_matrix44)


if __name__ == "__main__":
    main()



