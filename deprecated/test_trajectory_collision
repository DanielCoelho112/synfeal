#!/usr/bin/env python3


import trimesh
import numpy as np

# test on a sphere primitive
# mesh = trimesh.creation.icosphere()

# filename ='/home/danc/models_3d/santuario_simplified/Virtudes_Chapel.dae' 
filename ='/home/danc/models_3d/santuario_simplified/Virtudes_Chapel.stl' 
mesh = trimesh.load_mesh(filename)

# create some rays
ray_origins = np.array([[0, 0, 0]])
ray_directions = np.array([[0, 4, 0]])

print(mesh.ray.intersects_location.__doc__)

# run the mesh- ray query
locations, index_ray, index_tri = mesh.ray.intersects_location(
        ray_origins=ray_origins,
        ray_directions=ray_directions)
print('The rays hit the mesh at coordinates:\n', locations)

print('The rays with index: {} hit the triangles stored at mesh.faces[{}]'.format(index_ray, index_tri))



# stdlib
# import sys
# import argparse
# from os.path import exists
# 
# # 3rd-party
# import rospkg
# import rospy
# import yaml
# import open3d as o3d
# from colorama import Fore, Style
# from std_msgs.msg import Header, ColorRGBA
# from geometry_msgs.msg import Point, Pose, Vector3, Quaternion
# from gazebo_msgs.msg import ModelState, ModelStates
# from visualization_msgs.msg import *
# from yaml.loader import SafeLoader
# 
# from localbot_core.src.utilities_ros import data2pose
# from localbot_core.src.interactive_data_collection import InteractiveDataCollection
# from localbot_core.src.automatic_data_collection import AutomaticDataCollection
# 
# 
# def main():
#     parser = argparse.ArgumentParser(description='Data Collector')
#     # parser.add_argument('-mc', '--model3d_config', type=str,
#                         # required=True, help='model3d config to use')
#     # arglist = [x for x in sys.argv[1:] if not x.startswith('__')]
#     # args = vars(parser.parse_args(args=arglist))
# 
#     filename ='/home/danc/models_3d/santuario_simplified/Virtudes_Chapel.dae' 
#     mesh = o3d.io.read_triangle_mesh(filename, enable_post_processing=False, print_progress=True)
# 
#     print('Finished loading mesh ...')
# 
#     # Create a scene and add the triangle mesh
#     scene = o3d.t.geometry.RaycastingScene()
#     # mesh_id = scene.add_triangles(mesh)
# 
# 
# if __name__ == "__main__":
#     main()
