#!/usr/bin/env python3

# stdlib
import sys
import argparse
import copy

# 3rd-party
import rospy
from colorama import Fore, Style
from std_msgs.msg import Header
from geometry_msgs.msg import Point, Pose, Vector3, Quaternion, TransformStamped, Transform
from visualization_msgs.msg import *
from localbot_localization.src.dataset import LocalBotDataset
from localbot_localization.src.validate_dataset import ValidateDataset
import numpy as np

def main():    
    parser = argparse.ArgumentParser(description='Validate dataset')
    parser.add_argument('-dataset', '--dataset', type=str, required=True, help='Name of the dataset')
    parser.add_argument('-suffix', '--suffix', type=str, required=True, help='Suffix to append to the name of the validated dataset')
    parser.add_argument('-pts', '--points', type=int, default=20000, help='Number of points to downsample')
    parser.add_argument('-ig', '--ignore_pointcloud', action='store_true', help='Ignore all pointcloud processing')
    
    arglist = [x for x in sys.argv[1:] if not x.startswith('__')]
    args = vars(parser.parse_args(args=arglist))
    
    dataset = LocalBotDataset(path_seq=args['dataset'])
    
    validate = ValidateDataset()
    
    validated_dataset = validate.duplicateDataset(dataset, args['suffix'])
    
    if not args['ignore_pointcloud']:
        print('init remove nans')
        validate.removeNansPointCloud(validated_dataset)
    
    print('init downsample pointcloud')
    validate.downsamplePointCloud(validated_dataset, args['points'])
    
    if not args['ignore_pointcloud']:
        print('init scale pointcloud')
        validate.scalePointCloud(validated_dataset)    
        
        
if __name__ == "__main__":
    main()



