#!/usr/bin/env python3

# stdlib
import sys
import argparse

# 3rd-party
from visualization_msgs.msg import *
from dataset import Dataset
from process_dataset.src.validate_dataset import ValidateDataset

def main():    
    parser = argparse.ArgumentParser(description='Validate dataset')
    parser.add_argument('-d', '--dataset', type=str, required=True, help='Name of the dataset')
    parser.add_argument('-s', '--suffix', type=str, required=True, help='Suffix to append to the name of the dataset')
    parser.add_argument('-fi', '--fraction_inpaint', type=float, default=0.5, help='The depth images will be inpaint with a fraction of size equal to X')
    parser.add_argument('-pts', '--points', type=int, default=1000, help='Number of points to downsample')
    parser.add_argument('-igp', '--ignore_pointcloud', action='store_true', help='Ignore all pointcloud processing')
    
    arglist = [x for x in sys.argv[1:] if not x.startswith('__')]
    args = vars(parser.parse_args(args=arglist))
    
    dataset = Dataset(path_seq=args['dataset'])
    
    validate = ValidateDataset()
    
    validated_dataset = validate.duplicateDataset(dataset, args['suffix'])
    
    ###################################### process depth images ######################################
    print('creating depth images')
    validate.createDepthImages(validated_dataset, args['fraction_inpaint'])
    
    ###################################### process pointclouds ######################################
    if not args['ignore_pointcloud']:
        print('init remove nans')
        validate.removeNansPointCloud(validated_dataset)
    
    print('init downsample pointcloud')
    validate.downsamplePointCloud(validated_dataset, args['points'])
    
    if not args['ignore_pointcloud']:
        print('init scale pointcloud')
        validate.scalePointCloud(validated_dataset)  

    ###################################### create stats ######################################
    print('computing image stats')
    validate.createStatistics(validated_dataset)
        
if __name__ == "__main__":
    main()



